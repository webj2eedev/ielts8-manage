<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.webj2eedev.ieltsnote.dao.ListeningDAO">
    <select id="queryCatetory" parameterType="com.webj2eedev.ieltsnote.entity.ListeningCategoryDO" resultType="com.webj2eedev.ieltsnote.entity.ListeningCategoryDO">
        SELECT id, parent_id, `order`, label, comment, storyline_category_id
        FROM
            ieltsnote.listening_category
        order by IF(ISNULL(`order`),1,`order`) asc, label
    </select>

    <insert id="addSiblingCategory" parameterType="com.webj2eedev.ieltsnote.entity.ListeningCategoryDO">
        insert into ieltsnote.listening_category (parent_id, label)
        values
            (#{parentId}, #{label})
    </insert>

    <insert id="addChildCategory" parameterType="com.webj2eedev.ieltsnote.entity.ListeningCategoryDO">
        insert into ieltsnote.listening_category (parent_id, label)
        values
            (#{id}, #{label})
    </insert>

    <update id="updateCategory" parameterType="com.webj2eedev.ieltsnote.entity.ListeningCategoryDO">
        update ieltsnote.listening_category
        set
            update_time = NOW()
        <if test="storylineCategoryId!=null and storylineCategoryId!=''">
            , storyline_category_id = #{storylineCategoryId}
        </if >
        WHERE
            id = #{id}
    </update>

    <select id="queryQAs" parameterType="com.webj2eedev.ieltsnote.entity.ListeningCategoryDO" resultType="com.webj2eedev.ieltsnote.entity.ListeningQADO">
        select
            st.part,
            st.category,
            st.id question_id,
            st.question,
            st.creator question_creator,
            st.create_time question_create_time,
            sta.uid answer_id,
            sta.answer_thought,
            sta.answer_text,
            count(sam.uid) answer_mp3_cnt,
            sta.cohesion_and_coherence_tags answer_cohesion_and_coherence_tags,
            sta.comment answer_comment,
            sta.creator answer_creator,
            sta.create_time answer_create_time,
            sta.update_time answer_update_time
        from
            ieltsnote.listening_question st
        left join ieltsnote.listening_answer sta
            on
            st.id = sta.id
        left join Listening_answer_mp3 sam
            on
            sta.uid = sam.answer_id
        where
            st.category = #{id}
        group by
            st.part,
            st.category ,
            st.id ,
            st.question ,
            st.creator ,
            sta.uid,
            sta.answer_thought ,
            sta.answer_text ,
            sta.cohesion_and_coherence_tags,
            sta.comment ,
            sta.creator ,
            sta.create_time ,
            sta.update_time
        order by
            st.`order`,
            st.create_time
    </select>

    <insert id="addQuesion" parameterType="com.webj2eedev.ieltsnote.entity.ListeningQADO">
        insert into ieltsnote.listening_question (part, category, question, creator, create_time)
        values
        (#{part}, #{category}, #{question}, #{questionCreator}, NOW())
    </insert>

    <insert id="addAnswer" useGeneratedKeys="true" keyProperty="answerId" keyColumn="uid" parameterType="com.webj2eedev.ieltsnote.entity.ListeningQADO">
        insert into ieltsnote.listening_answer (id, answer_thought, answer_text, comment, creator, create_time)
        values
        (#{questionId}, #{answerThought}, #{answerText}, #{answerComment}, #{answerCreator}, NOW())
    </insert>

    <delete id="deleteAnswer" parameterType="com.webj2eedev.ieltsnote.entity.ListeningQADO">
        delete FROM ieltsnote.listening_answer
        WHERE
            uid = #{answerId}
    </delete>

    <update id="updateAnswerThought" parameterType="com.webj2eedev.ieltsnote.entity.ListeningQADO">
        update ieltsnote.listening_answer
        set
            answer_thought = #{answerThought}, update_time = NOW()
        WHERE
            uid = #{answerId}
    </update>

    <update id="updateAnswerComment" parameterType="com.webj2eedev.ieltsnote.entity.ListeningQADO">
        update ieltsnote.listening_answer
        set
            comment = #{answerComment}, update_time = NOW()
        WHERE
            uid = #{answerId}
    </update>

    <update id="updateAnswerText" parameterType="com.webj2eedev.ieltsnote.entity.ListeningQADO">
        update ieltsnote.listening_answer
        set
            answer_text = #{answerText}, update_time = NOW()
        WHERE
            uid = #{answerId}
    </update>

    <insert id="addAnswerMp3" parameterType="com.webj2eedev.ieltsnote.entity.ListeningAnswerMp3DO">
        insert into ieltsnote.listening_answer_mp3(answer_id, answer_mp3_ossid, answer_mp3_duration, create_time)
        values(#{answerId}, #{answerMp3Ossid}, #{answerMp3Duration}, NOW())
    </insert>

    <select id="queryAnswerMp3s" parameterType="com.webj2eedev.ieltsnote.entity.ListeningQADO" resultType="com.webj2eedev.ieltsnote.entity.ListeningAnswerMp3DO">
        select
            sam.uid as mp3_id,
            sam.answer_id,
            sam.answer_mp3_ossid ,
            sam.answer_mp3_duration,
            sam.comment ,
            sam.creator ,
            sam.create_time ,
            sam.update_time
        from
            ieltsnote.listening_answer_mp3 sam
        where
            sam.answer_id = #{answerId}
        order by
            create_time desc
    </select>

    <update id="updateAnswerCohesionAndCoherenceTags" parameterType="com.webj2eedev.ieltsnote.entity.ListeningQADO">
        update ieltsnote.listening_answer
        set
            cohesion_and_coherence_tags = #{answerCohesionAndCoherenceTags}, update_time = NOW()
        WHERE
            uid = #{answerId}
    </update>

    <insert id="log" parameterType="com.webj2eedev.ieltsnote.entity.ListeningLogDO">
        INSERT INTO ieltsnote.listening_log
        (`action`, category_id, category_label, scene_id, scene_label, mp3_id, mp3_duration, listening_duration, creator, log_time)
        VALUES(#{action}, #{categoryId}, #{categoryLabel}, #{sceneId}, #{sceneLabel}, #{mp3Id}, #{mp3Duration}, #{listeningDuration}, #{creator}, NOW());
    </insert>
    <select id="queryListeningSummary" parameterType="com.webj2eedev.ieltsnote.entity.ListeningLogDO" resultType="com.webj2eedev.ieltsnote.entity.ListeningSummaryDO">
        select
            sum(listening_duration) practice_duration,
            DATE_FORMAT(log_time, '%Y-%m-%d') practice_day
        from
            listening_log ll
        where
            creator = #{creator}
        group by
            practice_day
    </select>
</mapper>

